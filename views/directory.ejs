<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen - File Tree</title>
  <link rel="stylesheet" href="directory.css">
  <style>
    * {
    font-family: Helvetica;
    background-color: #212830;
    color: #9EA1B2;
  }
  
  .directory {
    padding-left: 10px;
    padding-top: 1px;
    padding-bottom: 1px;
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  
  .directory__toggle {
    padding-left: 10px;
    transform: rotate(-90deg)
  }
  
  .directory__icon {
    padding-left: 10px;
  }
  
  .directory__icon {
    padding-left: 10px;
  }
  
  .directory__name {
    padding-left: 10px;
  }
  
  .directory-container {
    padding-left: 10px;
  }
  
  .file {
    padding-left: 50px;
    padding-top: 1px;
    padding-bottom: 1px;
    display: flex;
  }
  
  .file__icon {
    padding-left: 10px;
  }
  
  .file__name {
    padding-left: 10px;
  }
  
  .file__options {
    align-self: flex-end;
  }
  
  
  .active {
    color: #FFFFFF;
    background-color: #31343F;
  }
  
  .icon {
    display: inline-block;
    width: 1em;
    height: 1em;
    stroke-width: 0;
    stroke: currentColor;
    fill: currentColor;
  }
  
  .svg-icon {
    width: 1em;
    height: 1em;
  }
  
  .expanded {
    transform: rotate(0deg)
  }









  @import "https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700";


body {
    font-family: 'Poppins', sans-serif;
    background: #fafafa;
}

a, a:hover, a:focus {
    color: inherit;
    text-decoration: none;
    transition: all 0.3s;
}

.navbar-btn {
    box-shadow: none;
    outline: none !important;
    border: none;
}

.wrapper {
    display: flex;
    align-items: stretch;
}

#sidebar {
    min-width: 250px;
    max-width: 250px;
    background: #212830;
    color: #fff;
    transition: all 0.3s;
}

#sidebar.active {
    margin-left: -250px;
}

#sidebar .sidebar-header {
    padding: 20px;
    background: #212830;
}

#sidebar ul.components {
    padding: 20px 0;
    border-bottom: 1px solid #212830;
}

#sidebar ul p {
    color: #fff;
    padding: 10px;
}

#sidebar ul li a {
    padding: 10px;
    font-size: 1.1em;
    display: block;
}
#sidebar ul li a:hover {
    color: #000000;
    background: #fff;
}

#sidebar ul li.active > a, a[aria-expanded="true"] {
    color: #fff;
    background: #212830;
}

#sidebarCollapse {
    background-color: #212830;
}


a[data-toggle="collapse"] {
    position: relative;
}

a[aria-expanded="false"]::before, a[aria-expanded="true"]::before {
    content: '\e259';
    display: block;
    position: absolute;
    right: 20px;
    font-family: 'Glyphicons Halflings';
    font-size: 0.6em;
}
a[aria-expanded="true"]::before {
    content: '\e260';
}

ul ul a {
    font-size: 0.9em !important;
    padding-left: 30px !important;
    background: #212830;
}

ul.CTAs {
    padding: 20px;
}

ul.CTAs a {
    text-align: center;
    font-size: 0.9em !important;
    display: block;
    border-radius: 5px;
    margin-bottom: 5px;
}

a.download {
    background: #fff;
    color: #000000;
}

a.article, a.article:hover {
    background: #212830 !important;
    color: #fff !important;
}

#content {
    min-height: 100vh;
    transition: all 0.3s;
}

@media (max-width: 768px) {
    #sidebar {
        margin-left: -250px;
    }
    #sidebar.active {
        margin-left: 0;
    }
    #sidebarCollapse span {
        display: none;
    }
}


#browser{
  width: 55vw;
  height:100vh;
  overflow: hidden;
  float: right;
}

#browserTitle{
  text-align: center;
}

#browserLink{
  border: 1px solid #31343F;
  background-color: #31343F;
  padding: 5px;
}

.browserHeader{
  height: 2.5vh;
}

#register{
  width: 30vw;
  height:100vh;
  float: left;
  background-color: #212830;
  border-left: 0.5px dotted #31343F;
  border-right: 0.5px dotted #31343F;
}

#container{
  min-width: 20vw;
  width: auto;
  padding-right: 10px;
  height:90vh;
  float: left;
  padding-top: 10vh;
}

#sidebar{
  width: 20vw;
  height:100vh;
  float: left;
}

iframe{
  width: 100%;
  height: 90%;
}

body{
  margin: 0px;
}

  </style>
</head>
<body>

    <div class="wrapper">
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3>My Bookmark</h3>
            </div>

            <ul class="list-unstyled components">
                <li>
                    <a href="#">Home</a>
                </li>
                <li class="active">
                    <a href="#pageSubmenu" data-toggle="collapse" aria-expanded="false">Bookmark</a>
                    <ul class="collapse list-unstyled" id="pageSubmenu">
                        <li><a href="/directory">Show Bookmark</a></li>
                        <li><a href="/collection">Bookrmark Collection</a></li>
                    </ul>
                </li>
                <li class="active">
                    <a href="#homeSubmenu" data-toggle="collapse" aria-expanded="false">User</a>
                    <ul class="collapse list-unstyled" id="homeSubmenu">
                        <li><a href="#">User Information</a></li>
                        <li><a href="#">Manage Password</a></li>
                    </ul>
                </li>
            </ul>

            <ul class="list-unstyled CTAs">
                <li><a href="/addDirectory" class="download">Add Bookmark Directory</a></li>
                <li><a href="/addFile" class="article">Add Bookmark File</a></li>
            </ul>
        </nav>

        <div id="content">
            <!--
                여기 html
            -->

            <div id="container">
            </div>

            <div id="browser">
                <h2 id="browserTitle" class="browserHeader">북마크 바로가기</h2>
                <h5 id="browserLink" class="browserHeader"><%= browserLink %></h5>
                <iframe src="<%= browserFrame %>" id="browserFrame"></iframe>
            </div>


            

        </div>
    </div>


  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react-dom.min.js'></script>
<script>

/*
let data = "";
console.log("data : ");
console.log("");
*/

let data = <%- JSON.stringify(content) %>;

    //let data = [{ "type": "directory", "name": ".", "contents": [{ "type": "directory", "name": "./bin", "contents": [{ "type": "file", "name": "./bin/greet" }] }, { "type": "directory", "name": "./lib", "contents": [{ "type": "file", "name": "./lib/greeting.rb" }] }, { "type": "directory", "name": "./spec", "contents": [{ "type": "file", "name": "./spec/01_greeting_spec.rb" }, { "type": "file", "name": "./spec/02_cli_spec.rb" }, { "type": "file", "name": "./spec/spec_helper.rb" }] }, { "type": "file", "name": "./CONTRIBUTING.md" }, { "type": "file", "name": "./Gemfile" }, { "type": "file", "name": "./Gemfile.lock" }, { "type": "file", "name": "./LICENSE.md" }, { "type": "file", "name": "./README.md" }] }];

// let data = [{"type":"directory",
//   "name": ".",
//   "contents": [
//     {"type":"file","name":"./CONTRIBUTING.md"},
//     {"type":"file","name":"./Gemfile"},
//     {"type":"file","name":"./Gemfile.lock"},
//     {"type":"file","name":"./LICENSE.md"},
//     {"type":"file","name":"./README.md"},
//     {"type":"directory",
//      "name":"./bin",
//      "contents": [
//       {"type":"file","name":"./bin/greet"}
//      ]
//     },
//     {"type":"directory",
//      "name":"./lib",
//      "contents": [
//        {"type":"file","name":"./lib/greeting.rb"},
//        {"type":"directory",
//         "name":"./lib/something",
//         "contents": [
//           {"type":"file","name":"./lib/something/hello.rb"}
//         ]
//     }]
//     },
//     {"type":"directory",
//      "name":"./spec",
//      "contents": [{"type":"file","name":"./spec/01_greeting_spec.rb"},{"type":"file","name":"./spec/02_cli_spec.rb"},{"type":"file","name":"./spec/spec_helper.rb"}]
//     }
//   ]
// }]

const FileIcon = () => {
  return /*#__PURE__*/(
    React.createElement("div", { class: "svg-icon" }, /*#__PURE__*/
    React.createElement("svg", { id: "icon-file-text2", class: "icon", viewBox: "0 0 32 32", fill: "currentColor", width: "1em", height: "1em" }, /*#__PURE__*/
    React.createElement("path", { d: "M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z" }), /*#__PURE__*/
    React.createElement("path", { d: "M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z" }), /*#__PURE__*/
    React.createElement("path", { d: "M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z" }), /*#__PURE__*/
    React.createElement("path", { d: "M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z" }))));

};

const FolderIcon = () => {
  return /*#__PURE__*/(
    React.createElement("div", { class: "svg-icon" }, /*#__PURE__*/
    React.createElement("svg", { id: "icon-folder", class: "icon", viewBox: "0 0 32 32", fill: "currentColor", height: "1em", width: "1em" }, /*#__PURE__*/
    React.createElement("path", { d: "M14 4l4 4h14v22h-32v-26z" }))));



};

const TriangleDown = () => {
  return /*#__PURE__*/(
    React.createElement("div", { class: "svg-icon" }, /*#__PURE__*/
    React.createElement("svg", { id: "svg__icon--triangle-down", viewBox: "0 0 9 4.5", fill: "currentColor", height: "1em", width: "1em" }, /*#__PURE__*/
    React.createElement("path", { d: "M0,0,4.5,4.5,9,0Z" }))));



};

const formatName = name => {
  return name.substr(name.lastIndexOf('/') + 1);
};

class FileTree extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeNode: null };

    this.setActiveNode = this.setActiveNode.bind(this);
  }

  setActiveNode(name) {
    this.setState({ activeNode: name });
  }

  render() {
    return /*#__PURE__*/(
      React.createElement("div", null, renderTree(this.props.root, this.setActiveNode, this.state.activeNode)));

  }}


class Directory extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      expanded: true };

    this.toggleDirectory = this.toggleDirectory.bind(this);
  }

  toggleDirectory() {
    this.setState({ expanded: !this.state.expanded });
  }

  render() {
    let node = this.props.node;
    return /*#__PURE__*/(
      React.createElement("div", { className: "directory-container" }, /*#__PURE__*/
      React.createElement("div", { className: "directory" }, /*#__PURE__*/
      React.createElement("div", { className: `directory__toggle ${this.state.expanded ? 'expanded' : ''}` }, /*#__PURE__*/
      React.createElement("div", { onClick: this.toggleDirectory }, /*#__PURE__*/React.createElement(TriangleDown, null))), /*#__PURE__*/

      React.createElement("div", { className: "directory__icon" }, /*#__PURE__*/
      React.createElement(FolderIcon, null)), /*#__PURE__*/

      React.createElement("div", { className: "directory__name" }, /*#__PURE__*/
      React.createElement("div", null, formatName(node.name)))),


      this.state.expanded ? node.contents.map(content => renderTree(content, this.props.setActiveNode, this.props.activeNode)) : ''));


  }}


const File = ({ name, setActiveNode, activeNode }) => {
  let isActive = activeNode === name;
  let className = isActive ? 'active' : '';
  return /*#__PURE__*/React.createElement("div", { className: className + ' file', onClick: () => setActiveNode(name) }, /*#__PURE__*/
  React.createElement("div", { className: "file__icon" }, /*#__PURE__*/
  React.createElement(FileIcon, null)), /*#__PURE__*/

  React.createElement("a", {href: "/click/" + formatName(name)},
  React.createElement("div", { className: "file__name"}, 
  formatName(name)),

  isActive && /*#__PURE__*/
  React.createElement("div", { className: "file__options" }, "...")));



};

var root = data[0];
var renderTree = (node, setActiveNode, activeNode) => {
  if (node.type === "file") {
    return /*#__PURE__*/React.createElement(File, { name: node.name, setActiveNode: setActiveNode, activeNode: activeNode });
  } else if (node.type === "directory") {
    return /*#__PURE__*/React.createElement(Directory, { node: node, setActiveNode: setActiveNode, activeNode: activeNode });
  } else {
    return null;
  }
};

ReactDOM.render( /*#__PURE__*/React.createElement(FileTree, { root: root }), document.getElementById('container'));


const browserLink = document.getElementById("browserLink");
const browserFrame = document.getElementById("browserFrame");
var fileName = document.getElementsByClassName("file__name");

</script>


</body>
</html>
